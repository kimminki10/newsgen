services:
  # Django 서비스
  django:
    build: .
    container_name: django
    command: gunicorn trandlator.wsgi:application --bind 0.0.0.0:8000
    volumes:
      - .:/app # 프로젝트 전체 마운트
      - static_volume:/app/staticfiles # 정적 파일 볼륨
    expose:
      - "8000" # 내부 통신용 포트
    depends_on:
      - redis
      - celery_worker
      - celery_beat

  # Nginx 서비스
  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - static_volume:/usr/share/nginx/html/static # 정적 파일 서빙
      - ./nginx.conf:/etc/nginx/conf.d/default.conf # Nginx 설정 파일
    depends_on:
      - django

  # Redis 서비스
  redis:
    image: redis:6
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      # Redis 헬스체크 설정
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 5

  # Celery Worker 서비스
  celery_worker:
    build: .
    container_name: celery_worker
    command: celery -A trandlator.celery worker --loglevel=info
    volumes:
      - .:/app
    depends_on:
      redis:
        condition: service_healthy # Redis가 헬스체크를 통과한 후 실행
  # Celery Beat 서비스 (주기적 작업 스케줄링)
  celery_beat:
    build: .
    container_name: celery_beat
    command: celery -A trandlator.celery beat --loglevel=info
    volumes:
      - .:/app
    depends_on:
      redis:
        condition: service_healthy # Redis가 헬스체크를 통과한 후 실행

volumes:
  static_volume:
